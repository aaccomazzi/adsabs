// Generated by CoffeeScript 1.6.1
(function() {
  var $, do_postable_filter, do_postable_info, h, parse_querystring, root,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $ = jQuery;

  console.log("In Funcs");

  h = teacup;

  parse_querystring = function(qstr) {
    var q, qlist;
    console.log("QQQ", qstr);
    qlist = qstr.split('&');
    qlist = _.difference(qlist, ['query=tagtype:ads/tagtype:tag']);
    qlist = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = qlist.length; _i < _len; _i++) {
        q = qlist[_i];
        _results.push(q.replace('query=tagname:', ''));
      }
      return _results;
    })();
    if (qlist.length === 1 && qlist[0] === "") {
      qlist = [];
    }
    console.log("QLIST", qlist);
    return qlist;
  };

  do_postable_info = function(sections, config, ptype) {
    return $.get(config.infoURL, function(data) {
      var content;
      if (ptype === 'library') {
        content = views.library_info(data, templates.library_itemsinfo);
      } else if (ptype === 'group') {
        content = views.group_info(data, templates.group_itemsinfo);
      }
      sections.$info.append(content + '<hr/>');
      return sections.$info.show();
    });
  };

  do_postable_filter = function(sections, config) {
    var loc, nonqloc, urla;
    console.log("CONFIG", config);
    $.get(config.tagsPURL, function(data) {
      var k, v, _ref, _results;
      _ref = data.tags;
      _results = [];
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        _results.push(format_tags(k, sections.$tagssec, get_tags(v, config.tqtype), config.tqtype));
      }
      return _results;
    });
    $.get("" + config.tagsucwtURL + "?tagtype=ads/tagtype:tag", function(data) {
      var e, qtxtlist, suggestions, _i, _len;
      suggestions = data.simpletags;
      console.log("SUGG", suggestions);
      qtxtlist = parse_querystring(config.querystring);
      if (qtxtlist.length > 0) {
        sections.$breadcrumb.text('Tags: ');
        for (_i = 0, _len = qtxtlist.length; _i < _len; _i++) {
          e = qtxtlist[_i];
          sections.$breadcrumb.append("<span class='badge'>" + e + "</span>&nbsp;");
        }
        sections.$breadcrumb.show();
      }
      return $.get(config.itemsPURL, function(data) {
        var biblist, bibstring, i, itemlist, itemsq, thecount, theitems;
        theitems = data.items;
        console.log("THEITEMS", theitems);
        sections.$count.text("" + theitems.length + " papers. ");
        sections.$count.show();
        thecount = data.count;
        itemlist = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = theitems.length; _j < _len1; _j++) {
            i = theitems[_j];
            _results.push("items=" + (encodeURIComponent(i.basic.fqin)));
          }
          return _results;
        })();
        biblist = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = theitems.length; _j < _len1; _j++) {
            i = theitems[_j];
            _results.push(i.basic.name);
          }
          return _results;
        })();
        bibstring = biblist.join("\n");
        sections.$bigquery.val(bibstring);
        sections.$bigqueryform.attr("action", config.bq2url);
        sections.$bigqueryform.attr("hello", "world");
        itemsq = itemlist.join("&");
        return $.get("" + config.itPURL + "?" + itemsq, function(data) {
          var cb, eb, ido, k, notes, plinv, postings, ptimes, sorteditems, stags, times, v, _j, _k, _len1, _len2, _ref, _ref1;
          console.log("POSTINGS", data.postings, config.fqpn);
          _ref = get_taggings(data), stags = _ref[0], notes = _ref[1];
          postings = {};
          times = {};
          _ref1 = data.postings;
          for (k in _ref1) {
            if (!__hasProp.call(_ref1, k)) continue;
            v = _ref1[k];
            if (v[0] > 0) {
              postings[k] = (function() {
                var _j, _len1, _ref2, _results;
                _ref2 = v[1];
                _results = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  e = _ref2[_j];
                  _results.push(e.posting.postfqin);
                }
                return _results;
              })();
              ptimes = (function() {
                var _j, _len1, _ref2, _results;
                _ref2 = v[1];
                _results = [];
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  e = _ref2[_j];
                  if (e.posting.postfqin === config.fqpn) {
                    _results.push(e.posting.whenposted);
                  }
                }
                return _results;
              })();
              console.log("PTIMES", ptimes);
              if (ptimes.length > 0) {
                times[k] = ptimes[0];
              } else {
                times[k] = 0;
              }
            } else {
              postings[k] = [];
              times[k] = 0;
            }
          }
          console.log("TIMES ARE ROCKING", times);
          sorteditems = _.sortBy(theitems, function(i) {
            return -Date.parse(times[i.basic.fqin]);
          });
          for (_j = 0, _len1 = sorteditems.length; _j < _len1; _j++) {
            i = sorteditems[_j];
            i.whenposted = times[i.basic.fqin];
          }
          console.log("SORTEDITEMS");
          for (_k = 0, _len2 = sorteditems.length; _k < _len2; _k++) {
            i = sorteditems[_k];
            console.log(i.basic.fqin, i.whenposted, i.whenpostedsecs);
          }
          ido = {
            stags: stags,
            postings: postings,
            notes: notes,
            $el: sections.$items,
            items: sorteditems,
            noteform: true,
            nameable: false,
            itemtype: 'ads/pub',
            memberable: config.memberable,
            suggestions: suggestions,
            pview: config.pview
          };
          plinv = new itemsdo.ItemsFilterView(ido);
          plinv.render();
          eb = function(err) {
            var d, _l, _len3, _results;
            console.log("ERR", err);
            _results = [];
            for (_l = 0, _len3 = theitems.length; _l < _len3; _l++) {
              d = theitems[_l];
              _results.push(format_item(plinv.itemviews[d.basic.fqin].$('.searchresultl'), d));
            }
            return _results;
          };
          cb = function(data) {
            var d, docnames, thedocs, _l, _len3, _len4, _m, _ref2, _ref3, _results;
            thedocs = {};
            _ref2 = data.response.docs;
            for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
              d = _ref2[_l];
              thedocs[d.bibcode] = d;
            }
            docnames = (function() {
              var _len4, _m, _ref3, _results;
              _ref3 = data.response.docs;
              _results = [];
              for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
                d = _ref3[_m];
                _results.push(d.bibcode);
              }
              return _results;
            })();
            _results = [];
            for (_m = 0, _len4 = theitems.length; _m < _len4; _m++) {
              d = theitems[_m];
              if (_ref3 = d.basic.name, __indexOf.call(docnames, _ref3) >= 0) {
                e = thedocs[d.basic.name];
              } else {
                e = {};
              }
              _results.push(format_item(plinv.itemviews[d.basic.fqin].$('.searchresultl'), e));
            }
            return _results;
          };
          console.log("ITTYS", theitems, (function() {
            var _l, _len3, _results;
            _results = [];
            for (_l = 0, _len3 = theitems.length; _l < _len3; _l++) {
              e = theitems[_l];
              _results.push(e.basic.fqin);
            }
            return _results;
          })());
          return syncs.send_bibcodes(config.bq1url, theitems, cb, eb);
        });
      });
    });
    loc = config.loc;
    nonqloc = loc.href.split('?')[0];
    if (sections.$ua.attr('data') === 'off') {
      if (nonqloc === loc.href) {
        urla = loc + "?userthere=true";
      } else {
        urla = loc + "&userthere=true";
      }
      sections.$ua.attr('href', urla);
      return sections.$ua.attr('data', 'on');
    }
  };

  root.postablefilter = {
    do_postable_info: do_postable_info,
    do_postable_filter: do_postable_filter
  };

}).call(this);
