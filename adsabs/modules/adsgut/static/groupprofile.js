// Generated by CoffeeScript 1.7.1
(function() {
  var $, PostableListView, PostableView, get_info, h, make_editable_description, root, w,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $ = jQuery;

  h = teacup;

  w = widgets;

  PostableView = (function(_super) {
    __extends(PostableView, _super);

    function PostableView() {
      this.clickedToggle = __bind(this.clickedToggle, this);
      this.render = __bind(this.render, this);
      return PostableView.__super__.constructor.apply(this, arguments);
    }

    PostableView.prototype.tagName = "tr";

    PostableView.prototype.events = {
      "click .yesbtn": "clickedToggle"
    };

    PostableView.prototype.initialize = function(options) {
      return this.rwmode = options.rwmode, this.memberable = options.memberable, this.fqpn = options.fqpn, this.username = options.username, options;
    };

    PostableView.prototype.render = function() {
      var content;
      content = w.one_col_table_partial(this.username);
      this.$el.html(content);
      return this;
    };

    PostableView.prototype.clickedToggle = function() {
      var cback, eback, loc;
      loc = window.location;
      cback = function(data) {
        return window.location = location;
      };
      eback = function(xhr, etext) {
        return alert('Did not succeed');
      };
      return syncs.toggle_rw(this.memberable, this.fqpn, cback, eback);
    };

    return PostableView;

  })(Backbone.View);

  PostableListView = (function(_super) {
    __extends(PostableListView, _super);

    function PostableListView() {
      this.render = __bind(this.render, this);
      return PostableListView.__super__.constructor.apply(this, arguments);
    }

    PostableListView.prototype.initialize = function(options) {
      this.$el = options.$e_el;
      this.fqpn = options.fqpn;
      this.users = options.users;
      this.owner = options.owner;
      return this.ownerfqin = options.ownerfqin;
    };

    PostableListView.prototype.render = function() {
      var $widget, rendered, u, v, views;
      views = (function() {
        var _results;
        _results = [];
        for (u in this.users) {
          _results.push(new PostableView({
            rwmode: this.users[u][1],
            fqpn: this.fqpn,
            memberable: u,
            username: this.users[u][0]
          }));
        }
        return _results;
      }).call(this);
      rendered = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = views.length; _i < _len; _i++) {
          v = views[_i];
          _results.push(v.render().el);
        }
        return _results;
      })();
      $widget = w.$one_col_table("User", rendered);
      this.$el.append($widget);
      return this;
    };

    return PostableListView;

  })(Backbone.View);

  make_editable_description = function($infodiv, fqpn) {
    var cback, eback;
    cback = function() {};
    eback = function() {};
    $.fn.editable.defaults.mode = 'inline';
    $infodiv.find('.edtext').editable({
      type: 'textarea',
      rows: 2,
      url: function(params) {
        return syncs.change_description(params.value, fqpn, cback, eback);
      }
    });
    return $infodiv.find('.edclick').click(function(e) {
      e.stopPropagation();
      e.preventDefault();
      return $infodiv.find('.edtext').editable('toggle');
    });
  };

  get_info = function(sections, config) {
    var cback, eback;
    cback = function() {};
    eback = function() {};
    return $.get(config.infoURL, function(data) {
      var content, ownerfqin;
      content = views.group_info(config.owner, data, templates.group_info);
      ownerfqin = data.group.owner;
      sections.$infodiv.append(content);
      if (config.owner) {
        make_editable_description(sections.$infodiv, config.fqpn);
      }
      sections.$infodiv.show();
      return $.get(config.membersURL, function(data) {
        var plinv;
        plinv = new PostableListView({
          users: data.users,
          fqpn: config.fqpn,
          owner: config.owner,
          ownerfqin: ownerfqin,
          $e_el: sections.$membersdiv
        });
        plinv.render();
        sections.$membersdiv.show();
        if (config.owner) {
          return $.get(config.invitedsURL, function(data) {
            content = views.postable_inviteds(config.fqpn, data, templates.postable_inviteds, true);
            sections.$invitedsdiv.append(content);
            return sections.$invitedsdiv.show();
          });
        }
      });
    });
  };

  root.groupprofile = {
    PostableView: PostableView,
    PostableListView: PostableListView,
    get_info: get_info
  };

}).call(this);
